# ======================================================================================================================# =====================================================Log==============================================================# 2019-12-02: Completed required cards functions# 2019-12-03: Completed player hand variables and card dealing function#             Started adding deck customization options# 2019-12-05: Started loop for player turns# 2019-12-08: Added win condition and message for main game loopimport utilitiesimport cardsimport randomimport sys# ===================================================Variables==========================================================discardPile = []playerHands = []player1Hand = []player2Hand = []player3Hand = []player4Hand = []cardPlayed = (0, 0)numJokers = 0handList = [player1Hand, player2Hand, player3Hand, player4Hand]forcedDraw = False  # Whether or not the next player is forced to draw cardsskipTurn = False  # Whether or not the next player's turn is skippedreverse = 1  # Order of turns; 1 = 1,2,3,4, -1 = 4,3,2,1# ==============================================Game Introduction=======================================================sys.stdout.flush()print("> Welcome to Garvin's Game! Please select an option by entering a number:\n"      "(1) Start Game\n"      "(2) View Rules")startChoice = utilities.intput("> ", "Please enter a number. ", 1, 2, "Please enter either 1 or 2. ")if startChoice == 2:    print("RULES:\n\n"          "> This 2 - 4 player card game uses a standard 52 card deck, with the option of using jokers.\n "          "> Each player starts with 7 cards, and one card starts in the discard pile. Players go in numerical order.\n"          "\nPlayer turns:\n\n"          "> During a player turn, a player can choose to draw up to 2 cards, play a single card, \n"          "  or play a run (3 or more cards with consecutive ranks) or a group (2 or more cards with the same rank).\n"          "> If the player does not have any playable cards, they are forced to draw a card. If they have drawn 2\n"          "  cards and still have no playable cards, their turn is automatically skipped.\n"          "> If the player chooses to play a card from their hand, the card must have either a higher rank than the\n"          "  top card on the discard pile, or the same suit as the top card.\n"          "> If the player chooses to play a run, the lowest value card of the run must be playable on its own.\n"          "> If the player chooses to play a group, at least 1 of the cards in the group must be playable on its own.\n"          "\nSpecial card effects:\n\n"          "> If an Ace is played, the next player's turn is skipped.\n"          "> If a 3 is played, the next player is forced to draw 3 cards from the deck.\n"          "> If a Jack is played, the order of play is reversed.\n"          "> If a joker is played, the next player's turn is skipped and they are forced to draw 3 cards from the deck."          "\n\n> The first player to empty their hand wins.\n"          )    utilities.cont()# ======================================================================================================================# Obtains the amount of people playing, and checks to make sure the amount is from 2 to 4numPlayers = utilities.intput("How many people are playing? Please enter a number from 2 - 4: ",                              "That is not a valid input. Please enter a number from 2 to 4\n>", 2, 4,                              "That is not a valid value. Please enter a number form 2 to 4\n>")# ======================================================================================================================# =============================================Deck Configuration=======================================================# Asks if user wants to play with jokers. Only accepts "y" or "n" as an answerjokers = input("Would you like to play with jokers? (y/n): ")while jokers.lower() != "n" and jokers.lower() != "y":    jokers = input("That is not a valid input. \n> Please enter 'n' or 'y': ")utilities.clear()if jokers.lower() == "y":    numJokers = 2# Creates and shuffles the deckdeck = cards.makeDeck(13, 4, numJokers)total = len(deck)random.shuffle(deck)# Deals out 7 cards to each player, then deals the top card into the discard pilefor num in range(numPlayers):    playerHands.append(handList[num])    playerHands[num] += cards.dealCards(deck, 7)discardPile.append(cards.dealCards(deck, 1))print(f"7 cards have been dealt to each player.\n"      f"The {cards.getCardName(discardPile[0]) :s} starts in the discard pile")# ======================================================================================================================# =================================================== Main Game ========================================================while all(len(length) != 0 for length in playerHands):    for turn in range(numPlayers)[::reverse]:        sys.stdout.flush()        discardTop = discardPile[-1]        cardsDrawn = 0        # Waits for players to switch before starting a player's turn        if cardPlayed[0] != 11:            input(f"Player {turn + 1 :d} turn. Press enter to continue ")            utilities.clear()        while True:            if cardPlayed[0] == 11:                cardPlayed = (0, 0)                break            # Shuffles discard pile into deck when deck is empty, keeping the top card in the discard pile            if len(deck) == 0:                deck = discardPile                discardPile.append(deck[-1])                random.shuffle(deck)                print("deck has been refilled")# ================================================Special Card Effects==================================================            # Draws 3 cards if forcedDraw is active. Will be active if last played card is 3 or Joker.            if forcedDraw:                draw = cards.dealCards(deck, 3)                playerHands[turn] += draw                print(                    f"Because the previous player played the {cards.getCardName(cardPlayed)},"                    f" you are forced to draw 3 cards."                    f"You have drawn the {cards.getCardName(draw[0])}, {cards.getCardName(draw[1])}, "                    f"{cards.getCardName(draw[2])}.")                forcedDraw = False                if skipTurn:                    print("Your new hand is as follows:")                    print(cards.showHand(playerHands[turn]))            # Player's turn is skipped if skipTurn is active. Will be active if last played card is Ace or Joker.            if skipTurn:                print(                    f"Because the previous player has played the {cards.getCardName(cardPlayed)},"                    f" your turn has been skipped.")                utilities.cont()                utilities.clear()                skipTurn = False                break# ==================================================Main Turn Loop======================================================            # Displays starting card and player hand            print(f"The top card on the discard pile is the {cards.getCardName(discardTop) :s}. \nYou must play a "                  f"card of greater rank, or a card with the same suit.\n\n"                  f"Player {turn + 1 :d}'s hand contains the following cards:")            print(cards.showHand(playerHands[turn]))            # Creates a list of playable cards in the player's hand            playableCards = cards.cardsPlayable(playerHands[turn], discardTop)            print("")            # If there are playable cards, the player is given the option to draw cards or play cards            if len(playableCards) != 0:                runGroups = cards.checkRunGroups(playerHands[turn], playableCards)                print("Your options are as follows:\n"                      "(1) Draw Card - Draw a card from the top of the deck\n"                      "(2) Play Card - Play one or more cards to the discard pile")                if not runGroups:                    choice = utilities.intput("Please select your option by by entering one of the numbers: ",                                              "That is an invalid input. Enter 1 or 2. ", 1, 2, "Please enter 1 or 2.")                elif runGroups == True:                    print("(3) Play Group - Play 2 or more cards of the same suit to the discard pile\n"                          "(4) Play Run - Play 3 or more cards of consecutive ranks to the discard pile")                    choice = utilities.intput("Please select your option by by entering one of the numbers: ",                                              "That is an invalid input. Enter 1, 2, 3, or 4. ", 1, 4,                                              "Please enter 1, 2, 3, or 4.")                elif runGroups == "groups":                    print("(3) Play Group - Play 2 or more cards of the same suit to the discard pile")                    choice = utilities.intput("Please select your option by by entering one of the numbers: ",                                              "That is an invalid input. Enter 1, 2, or 3. ", 1, 3,                                              "Please enter 1, 2, or 3.")                elif runGroups == "runs":                    print("(3) Play Run - Play 3 or more cards of consecutive ranks to the discard pile")                    choice = utilities.intput("Please select your option by by entering one of the numbers: ",                                              "That is an invalid input. Enter 1, 2, or 3. ", 1, 3,                                              "Please enter 1, 2, or 3.")                    if choice == 3:                        choice = 4                # Draw's a card if the player chooses to has not already drawn 2                print(choice)                if choice == 1 and cardsDrawn < 2:                    cardsDrawn += 1                    drawCard = cards.dealCards(deck, 1)                    playerHands[turn].append(drawCard)                    print(f"You have drawn the {cards.getCardName(drawCard) :s}\n"                          f"Your hand now contains:\n"                          f"{cards.showHand(playerHands[turn]) :s}")                elif choice == 1:                    print("You have already drawn two cards. You cannot draw another card in your turn.")                # If player chooses to play a card, allows player to choose a playable card                elif choice == 2:                    cardPlayed = playerHands[turn].pop(playerHands[turn].index(playableCards[                                           utilities.intput(                                               f"Your playable cards are as follows:\n{cards.showHand(playableCards)} "                                               f"\nPlease enter your selection as a number listed above: ",                                               "Please enter one of the numbers listed above. ",                                               1, len(playableCards),                                               "Please enter a playable card. ") - 1]))                    # If card played is Ace, next player's turn is skipped                    if cardPlayed[0] == 1:                        skipTurn = True                        discardPile.append(cardPlayed)                    # If card played is 3, next player is forced to draw 3 cards                    elif cardPlayed[0] == 3:                        forcedDraw = True                        discardPile.append(cardPlayed)                    # If card played is Jack, turn order is reversed                    elif cardPlayed[0] == 11:                        if reverse == -1:                            reverse = 1                        else:                            reverse = -1                        discardPile.append(cardPlayed)                    # If card played is Joker, next player's turn is skipped, and they are forced to draw 3 cards                    # Discard is refilled and discard pile is reset to allow for new starting card,                    # as joker is an unbeatable card                    elif cardPlayed[1] == -1:                        skipTurn = True                        forcedDraw = True                        deck += discardPile                        random.shuffle(deck)                        discardPile = [cards.dealCards(deck, 1)]                        print(discardPile)                    # If card played has no special effects, card is attached to discard pile                    else:                        discardPile.append(cardPlayed)                    print(f"You have played the {cards.getCardName(cardPlayed)}.")                    utilities.cont()                    utilities.clear()                    break                # If the player chooses to play a group, allows player to play a playable group                elif choice == 3:                    groups = cards.checkGroups(playerHands[turn], playableCards)                    cardPlayed = groups[utilities.intput("Please select the group you would like to play from the "                                                         f"following list:\n{cards.printGroups(groups,)}\n> ",                                                         "Please enter one of the numbers listed above. ", 1,                                                         len(groups), "Please enter one of the numbers above. ") - 1]                    print(f"You have played The {cards.printPlayedGroup(playerHands[turn], cardPlayed, discardPile)}"                          f" and The {cards.getCardName(cardPlayed[-1])}.")                    utilities.cont()                    utilities.clear()                    break                # If the player chooses to play a run, allows player to build a run                elif choice == 4:                    cardPlayed = (0, 0)                    runStarts = cards.checkRuns(playerHands[turn], playableCards)                    runCard = runStarts[utilities.intput(f"Please choose a starting card below to start a your run:"                                                         f"\n{cards.showHand(runStarts)}\n> ",                                                         "Please enter one of the numbers listed above. ", 1,                                                         len(runStarts),                                                         "Please enter one of the numbers above. ") - 1]                    run = [runCard]                    while runCard:                        print("\n\n\nYour current run contains:\n"                              f"> {cards.printCurrentRun(run)}.")                        runCard = cards.buildRun(runCard, playerHands[turn], run)                        if runCard:                            run.append(runCard)                    print(f"\nYou have played The {cards.printPlayedGroup(playerHands[turn], run, discardPile)}"                          f" and The {cards.getCardName(run[-1])}.")                    utilities.cont()                    utilities.clear()                    break            # If there are no playable cards, forces a card draw            else:                # If there are cards drawn and still no playable cards, turn is skipped                if cardsDrawn < 2:                    print("You have no playable cards, and are forced to draw a card.")                    cardsDrawn += 1                    drawCard = cards.dealCards(deck, 1)                    playerHands[turn].append(drawCard)                    print(f"You have draw the {cards.getCardName(drawCard)}.")                    utilities.cont()                else:                    print("You have no playable cards and you have already drawn two cards."                          " Your turn is automatically ended.")                    utilities.cont()                    utilities.clear()                    break# ======================================================================================================================        # utilities.clear()        # If a player's hand is empty, the following win statement prints        if any(len(length) == 0 for length in playerHands):            print(f"Player {(playerHands.index([])) + 1} wins!")            break